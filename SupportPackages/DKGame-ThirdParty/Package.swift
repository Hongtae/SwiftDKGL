// swift-tools-version: 5.6
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "DKGame-ThirdParty",
    products: [
        // Products define the executables and libraries a package produces, and make them visible to other packages.
        .library(
            name: "DKGame-ThirdParty",
            targets: [
                "DKGameSupport",
                "FreeType",
                "jpeg",
                "libpng",
                "libogg",
                "libvorbis",
                "libFLAC",
                "lz4",
                "lzma",
                "zlib",
                "cpp_test"]),
    ],
    dependencies: [],
    targets: [
        .target(
            name: "DKGameSupport",
            dependencies: []),
        .target(
            name: "FreeType",
            path: "Sources/FreeType",
            sources: [
                "src/autofit/autofit.c",
                "src/base/ftbase.c",
                "src/base/ftbbox.c",
                "src/base/ftbdf.c",
                "src/base/ftbitmap.c",
                "src/base/ftcid.c",
                "src/base/ftdebug.c",
                "src/base/ftfntfmt.c",
                "src/base/ftfstype.c",
                "src/base/ftgasp.c",
                "src/base/ftglyph.c",
                "src/base/ftgxval.c",
                "src/base/ftinit.c",
                "src/base/ftlcdfil.c",
                "src/base/ftmm.c",
                "src/base/ftotval.c",
                "src/base/ftpatent.c",
                "src/base/ftpfr.c",
                "src/base/ftstroke.c",
                "src/base/ftsynth.c",
                "src/base/ftsystem.c",
                "src/base/fttype1.c",
                "src/base/ftwinfnt.c",
                "src/bdf/bdf.c",
                "src/cache/ftcache.c",
                "src/cff/cff.c",
                "src/cid/type1cid.c",
                "src/gzip/ftgzip.c",
                "src/lzw/ftlzw.c",
                "src/pcf/pcf.c",
                "src/pfr/pfr.c",
                "src/psaux/psaux.c",
                "src/pshinter/pshinter.c",
                "src/psnames/psmodule.c",
                "src/raster/raster.c",
                "src/sfnt/sfnt.c",
                "src/smooth/smooth.c",
                "src/truetype/truetype.c",
                "src/type1/type1.c",
                "src/type42/type42.c",
                "src/winfonts/winfnt.c"],
            publicHeadersPath: "public",
            cSettings: [
                .define("_CRT_SECURE_NO_WARNINGS", .when(platforms:[.windows])),
                .define("FT2_BUILD_LIBRARY"),
                .define("FT_DEBUG_LEVEL_ERROR", .when(configuration:.debug)),
                .define("FT_DEBUG_LEVEL_TRACE", .when(configuration:.debug)),
                .headerSearchPath("include"),
            ]),
        .target(
            name: "jpeg",
            path: "Sources/jpeg",
            sources: [
                "jaricom.c",
                "jcapimin.c",
                "jcapistd.c",
                "jcarith.c",
                "jccoefct.c",
                "jccolor.c",
                "jcdctmgr.c",
                "jchuff.c",
                "jcinit.c",
                "jcmainct.c",
                "jcmarker.c",
                "jcmaster.c",
                "jcomapi.c",
                "jcparam.c",
                "jcprepct.c",
                "jcsample.c",
                "jctrans.c",
                "jdapimin.c",
                "jdapistd.c",
                "jdarith.c",
                "jdatadst.c",
                "jdatasrc.c",
                "jdcoefct.c",
                "jdcolor.c",
                "jddctmgr.c",
                "jdhuff.c",
                "jdinput.c",
                "jdmainct.c",
                "jdmarker.c",
                "jdmaster.c",
                "jdmerge.c",
                "jdpostct.c",
                "jdsample.c",
                "jdtrans.c",
                "jerror.c",
                "jfdctflt.c",
                "jfdctfst.c",
                "jfdctint.c",
                "jidctflt.c",
                "jidctfst.c",
                "jidctint.c",
                "jmemmgr.c",
                "jmemnobs.c",
                "jquant1.c",
                "jquant2.c",
                "jutils.c",
            ],
            publicHeadersPath: "."
            ),
        .target(
            name: "libpng",
            dependencies: [.target(name: "zlib")],
            path: "Sources/libpng",
            sources: [
                "png.c",
                "pngerror.c",
                "pngget.c",
                "pngmem.c",
                "pngpread.c",
                "pngread.c",
                "pngrio.c",
                "pngrtran.c",
                "pngrutil.c",
                "pngset.c",
                "pngtrans.c",
                "pngwio.c",
                "pngwrite.c",
                "pngwtran.c",
                "pngwutil.c"
            ],
            publicHeadersPath: ".",
            cSettings: [
                .define("_CRT_SECURE_NO_WARNINGS", .when(platforms: [.windows])),
                //.define("PNG_INTEL_SSE", .when(platforms: [.windows])),
                //.headerSearchPath("../zlib/src"),
            ]),
        .target(
            name: "libogg",
            path: "Sources/libogg",
            sources : ["src"],
            publicHeadersPath: "include"),
        .target(
            name: "libvorbis",
            dependencies: [.target(name: "libogg")],
            path: "Sources/libvorbis",
            sources: [
                "src/analysis.c",
                "src/bitrate.c",
                "src/block.c",
                "src/codebook.c",
                "src/envelope.c",
                "src/floor0.c",
                "src/floor1.c",
                "src/info.c",
                "src/lookup.c",
                "src/lpc.c",
                "src/lsp.c",
                "src/mapping0.c",
                "src/mdct.c",
                "src/psy.c",
                "src/registry.c",
                "src/res0.c",
                "src/sharedbook.c",
                "src/smallft.c",
                "src/synthesis.c",
                "src/vorbisenc.c",
                "src/vorbisfile.c",
                "src/window.c"],
            publicHeadersPath: "include",
            cSettings: [
                .define("_CRT_SECURE_NO_WARNINGS", .when(platforms: [.windows])),
            ]),
        .target(
            name: "libFLAC",
            dependencies: [.target(name: "libogg")],
            path: "Sources/libFLAC",
            sources: ["src/libFLAC"],
            publicHeadersPath: "include"),
        .target(
            name: "lz4",
            path: "Sources/lz4",
            sources: [
                "lib/lz4.c",
                "lib/lz4frame.c",
                "lib/lz4hc.c",
                "lib/xxhash.c"],
            publicHeadersPath: "lib"),
        .target(
            name: "lzma",
            path: "Sources/lzma",
            exclude: [],
            sources: [
                "C/7zAlloc.h",
                "C/7zArcIn.c",
                "C/7zBuf.c",
                "C/7zBuf2.c",
                "C/7zCrc.c",
                "C/7zCrcOpt.c",
                "C/7zDec.c",
                "C/7zFile.c",
                "C/7zStream.c",
                "C/Aes.c",
                "C/AesOpt.c",
                "C/Alloc.c",
                "C/Bcj2.c",
                "C/Bcj2Enc.c",
                "C/Bra.c",
                "C/Bra86.c",
                "C/BraIA64.c",
                "C/CpuArch.c",
                "C/Delta.c",
                "C/LzFind.c",
                "C/Lzma2Dec.c",
                "C/Lzma2DecMt.c",
                "C/Lzma2Enc.c",
                "C/Lzma86Dec.c",
                "C/Lzma86Enc.c",
                "C/LzmaDec.c",
                "C/LzmaEnc.c",
                "C/LzmaLib.c",
                "C/Ppmd7.c",
                "C/Ppmd7Dec.c",
                "C/Ppmd7Enc.c",
                "C/Sha256.c",
                "C/Sort.c",
                "C/Xz.c",
                "C/XzCrc64.c",
                "C/XzCrc64Opt.c",
                "C/XzDec.c",
                "C/XzEnc.c",
                "C/XzIn.c"
                ],
            publicHeadersPath: "C",
            cSettings: [
                .define("_7ZIP_ST"),
                //.unsafeFlags(["-march=native"]),
            ]),
        .target(
            name: "zlib",
            path: "Sources/zlib",
            sources: [
                "src/adler32.c",
                "src/compress.c",
                "src/crc32.c",
                "src/deflate.c",
                "src/gzclose.c",
                "src/gzlib.c",
                "src/gzread.c",
                "src/gzwrite.c",
                "src/infback.c",
                "src/inffast.c",
                "src/inflate.c",
                "src/inftrees.c",
                "src/trees.c",
                "src/uncompr.c",
                "src/zutil.c"],
            publicHeadersPath: "include"),
        .target(
            name: "zstd",
            path: "Sources/zstd",
            sources: [
                "lib/common",
                "lib/compress",
                "lib/decompress",
                "lib/dictBuilder",
            ],
            publicHeadersPath: "include",
            cSettings: [
                .headerSearchPath("lib"),
                .headerSearchPath("lib/common"),
                .headerSearchPath("lib/dictBuilder")]
        ),
        .target(
            name: "cpp_test",
            path: "Sources/cpp/cpp_test",
            cSettings: [
                // just test!
                .define("DKGL_CPP_TEST", to:"1234"),

                .define("DKGL_DEBUG_ENABLED", to:"1", .when(configuration: .debug)),
                .define("DKGL_DEBUG_ENABLED", to:"0", .when(configuration: .release)),

                // Graphics API selection
                .define("ENABLE_VULKAN", .when(platforms: [.windows, .linux, .android])),
                .define("ENABLE_METAL", .when(platforms: [.macOS, .iOS])),
                .define("ENABLE_D3D", .when(platforms: [.windows])),

                // GUI Platform
                .define("ENABLE_UIKIT", .when(platforms: [.iOS, .macOS])),
                .define("ENABLE_APPKIT", .when(platforms: [.macOS])),
                .define("ENABLE_WIN32", .when(platforms: [.windows])),
                .define("ENABLE_WAYLAND", .when(platforms: [.linux])),

            ],
            cxxSettings: [
                .define("DKGL_CPP_TEST2", to:"1234"),
                .headerSearchPath("include")
            ]),
    ]
)
